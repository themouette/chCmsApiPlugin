<?php
/**
 * test file for chCmsParamDateIntervalValidator generated by chCmsApiPlugin
 */

include dirname(__FILE__) . '/../../bootstrap/unit.php';

function makeInterval($start, $end)
{
  return sprintf('%s|%s',
    $start->format(DateTime::ISO8601),
    $end->format(DateTime::ISO8601)
  );
}

function makePostValidatorInterval($start, $end)
{
  return array(
    'start_date' => $start->format(DateTime::ISO8601),
    'end_date'   => $end->format(DateTime::ISO8601)
  );
}

$t = new lime_test(23, new lime_output_color());

$t->diag('test empty value');
$v = new chCmsParamDateIntervalValidator(array(
  'required'  => false,
  'default'   => $default = new DateTime('tomorrow')
));
$t->is($v->clean(null), $default, 'default value is used');

$t->diag('test valid value');
$start = new DateTime('now');
$end = new DateTime('+1 hour');
$t->is(
  $v->clean(makeInterval($start, $end)),
  array(
    $start,
    $end
  ),
  'default value is overriden by valid value'
);

$t->diag('test not valid value');
try
{
  $v->clean("%bad param%");
  $t->fail('invalid data should throw an exception');
}
catch (sfValidatorError $e)
{
  $t->pass('invalid parameter throw an exception');
  $t->is($e->getMessage(), 'Invalid interval "%bad param%".', 'exception embed expected message');
  $t->is($e->getCode(), 'invalid', 'exception embed expected code "invalid"');
}

$v = new chCmsParamDateIntervalValidator(array(
  'min_interval' => '2 hour'
));

$t->diag('test not valid value (interval too small)');
$start = new DateTime('now');
$end = new DateTime('+1 hour');
$interval = makeInterval($start, $end);
try
{
  $v->clean($interval);
  $t->fail('invalid data should throw an exception');
}
catch (sfValidatorError $e)
{
  $t->pass('invalid parameter throw an exception');
  $t->is($e->getMessage(), sprintf('Incorrect interval "%s".', $interval), 'exception embed expected message');
  $t->is($e->getCode(), 'inconsistent', 'exception embed expected code "inconsistent"');
}

$t->diag('test valid value');
$start = new DateTime('now');
$end = new DateTime('+2 hour');
$t->is(
  $v->clean(makeInterval($start, $end)),
  array(
    $start,
    $end
  ),
  'a large enough interval is valid'
);


$v = new chCmsParamDateIntervalValidator(array(
  'max_interval'  => '2 hour',
));

$t->diag('test not valid value (interval too small)');
$start = new DateTime('now');
$end = new DateTime('+3 hour');
$interval = makeInterval($start, $end);
try
{
  $v->clean($interval);
  $t->fail('invalid data should throw an exception');
}
catch (sfValidatorError $e)
{
  $t->pass('invalid parameter throw an exception');
  $t->is($e->getMessage(), sprintf('Incorrect interval "%s".', $interval), 'exception embed expected message');
  $t->is($e->getCode(), 'inconsistent', 'exception embed expected code "inconsistent"');
}

$t->diag('test valid value');
$start = new DateTime('now');
$end = new DateTime('+1 hour');
$t->is(
  $v->clean(makeInterval($start, $end)),
  array(
    $start,
    $end
  ),
  'a large enough interval is valid'
);

$start = new DateTime('+1 hour');
$end = new DateTime('now');
$interval = makeInterval($start, $end);
try
{
  $v->clean($interval);
  $t->fail('invalid data should throw an exception');
}
catch (sfValidatorError $e)
{
  $t->pass('invalid parameter throw an exception');
  $t->is($e->getMessage(), sprintf('Incorrect interval "%s".', $interval), 'exception embed expected message');
  $t->is($e->getCode(), 'inconsistent', 'exception embed expected code "inconsistent"');
}

$start = new DateTime('now -1 day');
$end = new DateTime('+1 hour');
$interval = makeInterval($start, $end);
try
{
  $v->clean($interval);
  $t->fail('invalid data should throw an exception');
}
catch (sfValidatorError $e)
{
  $t->pass('invalid parameter throw an exception');
  $t->is($e->getMessage(), sprintf('Incorrect interval "%s".', $interval), 'exception embed expected message');
  $t->is($e->getCode(), 'inconsistent', 'exception embed expected code "inconsistent"');
}

$t->diag('test valid value, using the validator as a post-validator');
$start = new DateTime('now');
$end = new DateTime('+1 hour');
$t->is(
  $v->clean($interval = makePostValidatorInterval($start, $end)),
  array_merge(
    $interval, array(
      'interval' => array(
        $start,
        $end
      )
    )
  ),
  'a large enough interval is valid'
);

$v = new chCmsParamDateIntervalValidator(array(
  'required'  => true,
  'default'   => $default = new DateTime('tomorrow')
));
try
{
  $v->clean(array(
    'start_date'  => 'foo',
  ));
  $t->fail('invalid data should throw an exception');
}
catch (sfValidatorError $e)
{
  $t->pass('invalid parameter throw an exception');
  $t->is($e->getMessage(), 'Required.', 'exception embed expected message');
  $t->is($e->getCode(), 'required', 'exception embed expected code "required"');
}
